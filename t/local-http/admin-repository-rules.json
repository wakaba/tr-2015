use strict;
use warnings;
use Path::Tiny;
use lib glob path (__FILE__)->parent->parent->parent->child ('t_deps/lib');
use Tests;

my $wait = web_server;

test {
  my $c = shift;
  return login ($c, admin => 1)->then (sub {
    return GET ($c, q</admin/repository-rules.json>)->then (sub {
      my $res = $_[0];
      test {
        is $res->code, 404;
      } $c, name => 'no account';
    });
  })->then (sub {
    return login ($c)->then (sub {
      my $account = $_[0];
      return GET ($c, q</admin/repository-rules.json>, account => $account)->then (sub {
        my $res = $_[0];
        test {
          is $res->code, 404;
        } $c, name => 'non-admin account';
        done $c;
        undef $c;
      });
    });
  });
} wait => $wait, n => 2, name => '/admin/repository-rules.json GET non-admin';

test {
  my $c = shift;
  return login ($c, admin => 1)->then (sub {
    my $account = $_[0];
    return GET ($c, q</admin/repository-rules.json>, account => $account)->then (sub {
      my $res = $_[0];
      test {
        is $res->code, 200;
        like $res->header ('Content-Type'), qr{application/json};
        my $json = json_bytes2perl $res->content;
        is $json->{rules}, undef;
      } $c;
      done $c;
      undef $c;
    });
  });
} wait => $wait, n => 3, name => '/admin/repository-rules.json GET admin empty';

run_tests;
stop_servers;
